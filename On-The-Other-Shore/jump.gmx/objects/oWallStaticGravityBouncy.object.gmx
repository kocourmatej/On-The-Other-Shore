<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sWallTinyColored</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g = 1;
g_dir = 270;
g_mult = 1;

inAir = false;

hf = 1;
vf = 0;
hf_mult = 1;
vf_mult = 1;

vspd = 0;
vspd_impulse = 0;
hspd = 0;
hspd_impulse = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
///Physics
//Gravity
vspd += g*g_mult;

//Horizontal movement
hspd += hspd_impulse;
for(i=0;i&lt;abs(hspd);i++) {
 if local_check_solid(sign(hspd),0) {
  if local_check_solid(sign(hspd),-1) || inAir == true {
   if local_check_solid(sign(hspd),-2) || inAir == true {
    hspd = 0;
   } else {
    local_translate(sign(hspd),-2);
    hspd = sign(hspd)/2;
   }
  } else {
   local_translate(sign(hspd),-1);
   hspd = sign(hspd)/3;
  }
 } else {
  local_translate(sign(hspd),0);
  if inAir == false &amp;&amp; !local_check_solid(0,1) &amp;&amp; local_check_solid(0,2) {
   local_translate(0,1);
  } else if inAir == false &amp;&amp; !local_check_solid(0,2) &amp;&amp; local_check_solid(0,3) {
   if !local_check_solid(0,1) {
    local_translate(0,1);
   }
   if !local_check_solid(0,1) {
    local_translate(0,1);
   }
  }
 }
}
hspd -= hspd_impulse;
hspd_impulse = 0;

//Horizontal friction
if hf != 0 {
 if hspd &gt; 0 {
  hspd = max(0,hspd-hf*hf_mult);
 } else if hspd &lt; 0 {
  hspd = min(0,hspd+hf*hf_mult);
 }
}

//Vertical movement
inAir = true;
vspd += vspd_impulse;
for(i=0;i&lt;abs(vspd);i+=1) {
 if local_check_solid(0,sign(vspd)) {
  if vspd &gt; 0 {
   var slope = local_inclination();
   if slope &lt;= -2 &amp;&amp; slope &gt;= -8 {
    local_translate(-1,0);
    hspd -= 1;
    i -= 1;
   } else if slope &gt;= 2 &amp;&amp; slope &lt;= 8 {
    local_translate(1,0);
    hspd += 1;
    i -= 1;
   } else {
    vspd = 0;
    inAir = false;
   }
  } else {
   vspd = 0;
  }
 } else {
  local_translate(0,sign(vspd));
 }
}
vspd -= vspd_impulse;
vspd_impulse = 0;

//Vertical friction
if vf != 0 {
 if vspd &gt; 0 {
  vspd = max(0,vspd-vf*vf_mult);
 } else if vspd &lt; 0 {
  vspd = min(0,vspd+vf*vf_mult);
 }
}

//Reset multipliers
hf_mult = 1;
vf_mult = 1;
g_mult = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d=abs(other.image_angle = image_angle)
if (d&lt;2) {if (speed &gt; 0) {speed -= 0.01}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other) {move_bounce_all(1)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// geniální!

draw_set_colour(c_dkgray)
d3d_transform_set_rotation_z(image_angle)
d3d_transform_add_translation(x,y,0)
draw_set_color(make_colour_rgb(255,102,204))
draw_rectangle(0,0,80+((80*image_xscale)-80),48+((48*image_yscale)-48),1) //+(80*image_xscale) 


draw_set_color(c_black)
draw_rectangle(2,2,80+((80*image_xscale)-80)-2,48+((48*image_yscale)-48)-2,0) //+(80*image_xscale) 

//draw_rectangle(x,y,x+(80*image_xscale),y+(48*image_yscale),1)
d3d_transform_set_identity()


draw_set_colour(c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.5</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.0199999995529652</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.0199999995529652</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.400000005960464</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>80,0</point>
    <point>80,48</point>
    <point>0,48</point>
  </PhysicsShapePoints>
</object>
