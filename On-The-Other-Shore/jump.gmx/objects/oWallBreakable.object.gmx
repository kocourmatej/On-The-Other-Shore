<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sWallTiny</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mode = 1;
if (image_angle != 0) {sprite_index = sWallPrecise;}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = abs(oPlayer.hspd);
spd2 = abs(oPlayer.vspd);


if (instance_number(oPlayer) &gt; 0)
{
if (distance_to_object(oPlayer) &lt; 25)
{


if (spd &gt; 15 || spd2&gt; 15) 
   {
   if (mode = 1) 
   {
//   show_message("");
   mode = 2; 
   sprite_index = sNoColl;
   
   
   
   ww = sprite_get_width(sprite_index); //we need to know how wide
hh = sprite_get_height(sprite_index); //and how tall our sprite is
chunk = 4; //this is how big your chunks will be in pixels

for (i=0;i&lt;ww;i+=chunk) { //we loop 4 pixel at a time all the way across
    for (j=0;j&lt;hh;j+=chunk) { //while picking all the vertical pixels in each column
        particle = instance_create(x+i,y+j,oParticle); //we create a particle relative to the object, offset by the proper amount
        particle.spr = sprite_index; //we need to tell the particle which sprite to draw. in this case, it's drawing the sprite of the object that's creating it
        particle.size = chunk;
        particle.xx = i; //we'll need the particles to have these values so they can draw the right part of the sprite
        particle.yy = j;
    }
}

   
   }
   }
}


if (mode =2)
   {
   if (image_alpha &gt; 0) {image_alpha -= 0.4} else {instance_destroy()}
   if (distance_to_object(oPlayer) &lt; 20)     
{
instance_create(oPlayer.x,oPlayer.y,oCutMask);

}
   }
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// geniální!
if (mode = 1)
{
draw_set_colour(c_gray)
d3d_transform_set_rotation_z(image_angle)
d3d_transform_add_translation(x,y,0)
draw_rectangle(0,0,80*image_xscale,48*image_yscale,1) //+(80*image_xscale) 


draw_set_color(c_black)
draw_rectangle(2,2,80*image_xscale-2,48*image_yscale-2,0) //+(80*image_xscale) 


d3d_transform_set_identity()


draw_set_colour(c_white)
}
//draw_text(x,y,oPlayer.vspd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.300000011920929</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.0199999995529652</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>80,0</point>
    <point>80,48</point>
    <point>0,48</point>
  </PhysicsShapePoints>
</object>
